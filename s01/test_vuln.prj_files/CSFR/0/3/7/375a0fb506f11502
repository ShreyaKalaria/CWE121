#ifndef CSONAR_MODELING_MACROS_GT
#define CSONAR_MODELING_MACROS_GT

#ifdef __CSURF__

#define csonar_assert(c) do{ if( !(c) ) for(;;); }while(0)

#define CODESONAR_ASSERT(x) csonar_assert(x)

#define CODESONAR_IF_THEN(x,y) do { if(x) { csonar_assert(y); } }while(0)

#define CODESONAR_EXCEPTION() csonar_assert(0)

#if ( __GNUC__ >= 4 ) || ( __GNUC__ == 3 && __GNUC_MINOR__ >= 4 )

#define CODESONAR_ASSERT_VECTOR()                               \
    do {                                                        \
       CODESONAR_ASSERT( !this->_M_impl._M_start                \
                         == !this->_M_impl._M_finish );         \
       CODESONAR_ASSERT( !this->_M_impl._M_start                \
                         == !this->_M_impl._M_end_of_storage ); \
       CODESONAR_ASSERT( this->_M_impl._M_start                 \
                         <= this->_M_impl._M_finish );          \
       CODESONAR_ASSERT( this->_M_impl._M_finish                \
                         <= this->_M_impl._M_end_of_storage );  \
    } while( 0 )

#define CODESONAR_ASSERT_VECTOR_ALLOCATED()                     \
    do {                                                        \
        CODESONAR_ASSERT( this->_M_impl._M_start > 0 );         \
        CODESONAR_ASSERT( this->_M_impl._M_start                \
                          <= this->_M_impl._M_finish );         \
        CODESONAR_ASSERT( this->_M_impl._M_finish               \
                          <= this->_M_impl._M_end_of_storage ); \
    } while( 0 )

#define CODESONAR_ASSERT_BVECTOR()                              \
    do {                                                        \
       CODESONAR_ASSERT( !this->_M_impl._M_start._M_p           \
                         == !this->_M_impl._M_finish._M_p );    \
       CODESONAR_ASSERT( !this->_M_impl._M_start._M_p           \
                         == !this->_M_impl._M_end_of_storage ); \
       CODESONAR_ASSERT( this->_M_impl._M_start._M_p            \
                         <= this->_M_impl._M_finish._M_p );     \
       CODESONAR_ASSERT( this->_M_impl._M_finish._M_p           \
                         <= this->_M_impl._M_end_of_storage );  \
    } while( 0 )

#define CODESONAR_ASSERT_BVECTOR_ALLOCATED()                    \
    do {                                                        \
        CODESONAR_ASSERT( this->_M_impl._M_start._M_p > 0 );    \
        CODESONAR_ASSERT( this->_M_impl._M_start._M_p           \
                          <= this->_M_impl._M_finish._M_p );    \
        CODESONAR_ASSERT( this->_M_impl._M_finish._M_p          \
                          <= this->_M_impl._M_end_of_storage ); \
    } while( 0 )

#elif defined(__GNUC__)

#define CODESONAR_ASSERT_VECTOR()                       \
    do {                                                \
       CODESONAR_ASSERT( !this->_M_start                \
                         == !this->_M_finish );         \
       CODESONAR_ASSERT( !this->_M_start                \
                         == !this->_M_end_of_storage ); \
       CODESONAR_ASSERT( this->_M_start                 \
                         <= this->_M_finish );          \
       CODESONAR_ASSERT( this->_M_finish                \
                         <= this->_M_end_of_storage );  \
    } while( 0 )

#define CODESONAR_ASSERT_VECTOR_ALLOCATED()             \
    do {                                                \
        CODESONAR_ASSERT( this->_M_start > 0 );         \
        CODESONAR_ASSERT( this->_M_start                \
                          <= this->_M_finish );         \
        CODESONAR_ASSERT( this->_M_finish               \
                          <= this->_M_end_of_storage ); \
    } while( 0 )

#define CODESONAR_ASSERT_BVECTOR()                              \
    do {                                                        \
       CODESONAR_ASSERT( !this->_M_start._M_p                   \
                         == !this->_M_finish._M_p );            \
       CODESONAR_ASSERT( !this->_M_start._M_p                   \
                         == !this->_M_end_of_storage );         \
       CODESONAR_ASSERT( this->_M_start._M_p                    \
                         <= this->_M_finish._M_p );             \
       CODESONAR_ASSERT( this->_M_finish._M_p                   \
                         <= this->_M_end_of_storage );          \
    } while( 0 )

#define CODESONAR_ASSERT_BVECTOR_ALLOCATED()            \
    do {                                                \
        CODESONAR_ASSERT( this->_M_start._M_p > 0 );    \
        CODESONAR_ASSERT( this->_M_start._M_p           \
                          <= this->_M_finish._M_p );    \
        CODESONAR_ASSERT( this->_M_finish._M_p          \
                          <= this->_M_end_of_storage ); \
    } while( 0 )

#else

#define CODESONAR_ASSERT_VECTOR()                              
#define CODESONAR_ASSERT_VECTOR_ALLOCATED() 
#define CODESONAR_ASSERT_BVECTOR_ALLOCATED()                    
        
#endif 

extern int CODESONAR_UNKNOWN_NUMBER;

#ifndef CSM_UNKNOWN_INTEGER
#define CSM_UNKNOWN_INTEGER() (~CODESONAR_UNKNOWN_NUMBER)
#endif

#define CODESONAR_HOIST_NPD(x) (*(x))

#define CODESONAR_HINT_UNLIKELY(expr) (expr)

#ifdef __cplusplus
extern "C" {
#endif
    void csonar_important_global( void *var );
    int cs_untrusted_value(void);
    void csonar_set_initialized( const void * const address, int val );
    void csonar_escape( void *obj );
    extern int codesonar_distance_tweak;
#ifdef __cplusplus
}
#endif

#define CSM_INPUT_SOURCE cs_untrusted_value

#define CODESONAR_INIT(p, sz) do {                              \
        char *__cso_init_p = (char*)(p);                        \
        csonar_set_initialized(__cso_init_p, 1);                \
        if (sz > 0) {                                           \
            __cso_init_p[0] = 0;                                \
            __cso_init_p[sz-1] = 0;                             \
        }                                                       \
    }while(0)


#define CODESONAR_MAYBE_INIT(p) csonar_set_initialized(p, CSM_UNKNOWN_INTEGER())
    
#endif

#endif
// Functions used by iterators -*- C++ -*-

// Copyright (C) 2001-2013 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/*
 *
 * Copyright (c) 1994
 * Hewlett-Packard Company
 *
 * Permission to use, copy, modify, distribute and sell this software
 * and its documentation for any purpose is hereby granted without fee,
 * provided that the above copyright notice appear in all copies and
 * that both that copyright notice and this permission notice appear
 * in supporting documentation.  Hewlett-Packard Company makes no
 * representations about the suitability of this software for any
 * purpose.  It is provided "as is" without express or implied warranty.
 *
 *
 * Copyright (c) 1996-1998
 * Silicon Graphics Computer Systems, Inc.
 *
 * Permission to use, copy, modify, distribute and sell this software
 * and its documentation for any purpose is hereby granted without fee,
 * provided that the above copyright notice appear in all copies and
 * that both that copyright notice and this permission notice appear
 * in supporting documentation.  Silicon Graphics makes no
 * representations about the suitability of this software for any
 * purpose.  It is provided "as is" without express or implied warranty.
 */

/** @file bits/stl_iterator_base_funcs.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{iterator}
 *
 *  This file contains all of the general iterator-related utility
 *  functions, such as distance() and advance().
 */

#ifndef _STL_ITERATOR_BASE_FUNCS_H
#define _STL_ITERATOR_BASE_FUNCS_H 1

#pragma GCC system_header

#include <bits/concept_check.h>
#include <debug/debug.h>

namespace std _GLIBCXX_VISIBILITY(default)
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)

      typename iterator_traits<_InputIterator>::difference_type __n = 0;
#ifdef __CSURF__
      if( __first == __last )
          return 0;
#endif
      while (__first != __last)
	{
	  ++__first;
	  ++__n;
	}
      CODESONAR_ASSERT( __n > 0 );
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type rv = __last - __first;
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      CODESONAR_IF_THEN( __last != __first, rv > 0 );
      CODESONAR_IF_THEN( rv == 0, __last == __first );
      return rv;
    }

  /**
   *  @brief A generalization of pointer arithmetic.
   *  @param  __first  An input iterator.
   *  @param  __last  An input iterator.
   *  @return  The distance between them.
   *
   *  Returns @c n such that __first + n == __last.  This requires
   *  that @p __last must be reachable from @p __first.  Note that @c
   *  n may be negative.
   *
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
			     std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      _GLIBCXX_DEBUG_ASSERT(__n >= 0);
      while (__n--)
	++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline void
    __advance(_BidirectionalIterator& __i, _Distance __n,
	      bidirectional_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_BidirectionalIteratorConcept<
				  _BidirectionalIterator>)
      if (__n > 0)
        while (__n--)
	  ++__i;
      else
        while (__n++)
	  --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
    }

  /**
   *  @brief A generalization of pointer arithmetic.
   *  @param  __i  An input iterator.
   *  @param  __n  The @a delta by which to change @p __i.
   *  @return  Nothing.
   *
   *  This increments @p i by @p n.  For bidirectional and random access
   *  iterators, @p __n may be negative, in which case @p __i is decremented.
   *
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }

#if __cplusplus >= 201103L

  template<typename _ForwardIterator>
    inline _ForwardIterator
    next(_ForwardIterator __x, typename
	 iterator_traits<_ForwardIterator>::difference_type __n = 1)
    {
      std::advance(__x, __n);
      return __x;
    }

  template<typename _BidirectionalIterator>
    inline _BidirectionalIterator
    prev(_BidirectionalIterator __x, typename
	 iterator_traits<_BidirectionalIterator>::difference_type __n = 1) 
    {
      std::advance(__x, -__n);
      return __x;
    }

#endif // C++11

_GLIBCXX_END_NAMESPACE_VERSION
} // namespace

#endif /* _STL_ITERATOR_BASE_FUNCS_H */
